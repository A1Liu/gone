use super::general::*;
use crate::filedb::*;

#[derive(Debug, Clone, Copy)]
pub struct CompilerLoc {
    pub file: &'static str,
    pub line: u32,
}

macro_rules! here {
    () => {{
        $crate::util::error::CompilerLoc {
            file: core::file!(),
            line: core::line!(),
        }
    }};
}

#[derive(Debug)]
pub struct Error {
    pub info: &'static str,
    pub message: Option<String>,
    pub loc: CodeLoc,
    pub file: u32,
    #[cfg(debug_assertions)]
    pub compiler_loc: CompilerLoc,
}

impl Error {
    pub fn render(&self, files: &FileDb) -> String {
        use crate::util::term::*;
        use crate::util::*;

        let mut out = StringWriter::new();
        write!(out, "{}", self.info).unwrap();

        if cfg!(debug_assertions) {
            let loc = self.compiler_loc;
            write!(out, " (generated by {}:{})", loc.file, loc.line).unwrap();
        }
        let info = out.flush_string();

        Diagnostic::new()
            .with_labels(vec![Label::new(self.file, self.loc)])
            .with_message(info)
            .with_notes(self.message.clone().map(|a| vec![a]).unwrap_or(Vec::new()))
            .render(files, &mut out)
            .unwrap();

        return out.into_string();
    }
}
