type Alpha {
    a : (u64, string, { a:= 12 })
}

{ hello_outer := "Hello, " }

type Beta { a := 12 }

hello_outer := "Hello, "
world := "world!"

main(hello_outer)

hi := {
  tmp := 12;
  a := tmp + 13
  b := tmp + 14
  c := "my data"
  d := "it's mine don touch it"
}

print(hi.a)
print(hi.tmp)
print(hi)

/* */
/* a = 
/* */ */

a := if 12 13 else 14

let an_integer = 1u32;
let a_boolean = true;
let unit = ();

// copy `an_integer` into `copied_integer`
let copied_integer = an_integer;

println("An integer: {:?}", copied_integer);
println("A boolean: {:?}", a_boolean);
println("Meet the unit value: {:?}", unit);

// The compiler warns about unused variable bindings; these warnings can
// be silenced by prefixing the variable name with an underscore
let _unused_variable = 3u32;

let noisy_unused_variable = 2u32;
// FIXME ^ Prefix with an underscore to suppress the warning

let number = 13;
    // TODO ^ Try different values for `number`

println("Tell me about {}", number);
match number {
    // Match a single value
    1 => println("One!"),
    // Match several values
    2 | 3 | 5 | 7 | 11 => println("This is a prime"),
    // TODO ^ Try adding 13 to the list of prime values
    // Match an inclusive range
    13..=19 => println("A teen"),
    // Handle the rest of cases
    _ => println("Ain't special"),
    // TODO ^ Try commenting out this catch-all arm
}

let boolean = true;
// Match is an expression too
let binary = match boolean {
    // The arms of a match must cover all the possible values
    false => 0,
    true => 1,
    // TODO ^ Try commenting out one of these arms
};

println("{} -> {}", boolean, binary);

let triple = (0, 2, 3);
// TODO ^ Try different values for `triple`

println("Tell me about {:?}", triple);
// Match can be used to destructure a tuple
match triple {
    // Destructure the second and third elements
    (0, y, z) => println("First is `0`, `y` is {:?}, and `z` is {:?}", y, z),
    (1, ..)  => println("First is `1` and the rest doesn't matter"),
    // `..` can be the used ignore the rest of the tuple
    _      => println("It doesn't matter what they are"),
    // `_` means don't bind the value to a variable
}
